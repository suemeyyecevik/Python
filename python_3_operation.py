# -*- coding: utf-8 -*-
"""Python-3 Operation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BDXafrp3oVdvMB5kbADE7rG3W1QxK0aJ

**Python Operatörler**

Pythonda operatörleri, aritmetik operatörler, atama operatörleri, karşılaştırma operatörleri ve mantıksal operatörler şeklinde gruplayabiliriz.


**Aritmetik Operatörler**
Pythonda aritmetik operatörleri matematiksel işlemler için kullanırız.


     	x = 20 y = 5	sonuc
+	Toplama
sonuc = x + y

25
-	Çıkarma
sonuc = x - y

15
*	Çarpma
sonuc = x * y

100
/	Bölme	 	sonuc = x / y	4.0

%	Mod Alma	 	sonuc = y % x	0

//	Tam Bölme	 	sonuc = x // y	4

**	Üs alma	 	sonuc = 2 ** 3	8
"""

100/25    #Normal bölme işlemi kesirli oluyor.

type (100/25)     #Type ını (tipini) öğrenme.

100//25     #Tam bölme işlemi.

type (100//25)      #Type ını öğrenme.

100%25    #Modus alma işlemi.
          #İşlemin kalanını verir.

type (100%25) #Type ını öğrenme.

100 ** 25   #Üs alma işlemi.(POW deyimi)

pow (100,4)

2 ** 4  #Üs alma işlemi.

# What is the output ?
 # Çıktısı nedir ?
print (10 - 7)
print (5 + 11.0)
print ('17- 4')
print ('5'+ 5)   # Bu kısım bize TYPE ERROR verir.

# What is the output ?
# Çıktısı nedir ?

num1,num2 = 85,55
num3= num1-num2
print (num3)

#Bir dairenin alanını hesaplama.
r=5     #Yarıçap
pi=3.14
area=pi * r**2
print ('Daire alanı...', area)

# What is the output ?
# Çıktısı nedir ?

print(11 % 2)
print((4 * 5) / 2)

type (11 % 2) #Type ını öğrenme

# What is the output ?
# Çıktısı nedir ?

print(2 ** 3)
print(3 ** 2)
a= 2
b= 8
print ((a * b) ** 0.5)

#pow ile üst alma.
print (pow(2,3))
print (pow(3,2))
a= 2
b= 8
print (pow (a * b,0.5))

#Tüm aritmetiksel operatörler '=' atama operatörü ile birleştirilebilir.

x= 5
y= 4
x += 3  # x = x + 3 = 8
y += x  # y = y + x = 12
print (x,y)

"""
**Python'da İşlem Önceliği Sırası:**

1.Parantezler ()

2.Üs alma **

3.İşaret (artı/eksi)

4.Çarpma, bölme, mod, tamsayı bölmesi *, /, %, //

5.Toplama ve çıkarma +, -

6.Karşılaştırma >, <, >=, <=

7.Mantıksal NOT not

8.Mantıksal AND and

9.Mantıksal OR or

10.Atama =, +=, -=, vb.
"""

#İşlem önceliği parantez daha önceliklidir.
a= (1+3) ** (2**(1*2/2)/2)
print (a)

#Bir üçgenin hipotenüsünü hesaplayalım.
#a^3 + b^4 = c^2
a = 3
b = 4
c = (a**2 + b**2)**0.5
print ('Hipotenus..:',c)

"""#PRİNT DEYİMİ"""

#help
help(print)

text1 ='I bought'
text2 = 'kg. of apple this morning'
amount = 6
text3 = text1 + ' ' + str(amount) + ' ' + text2  #amount daki sayısı string e çeviriyoruz. + ile birleştiriyoruz cümleleri.
print (text1,amount,text2)
print ('I bought', 6 , 'kg. of apple this morning')
print ('I bought '+ '6' + 'kg. of apple this morning')
print (text3)

"""**ESCAPE CHARACTERS **

```
Code	Result	Try it
\'	Single Quote
\\	Backslash
\n	New Line
\r	Carriage Return
\t	Tab
\b	Backspace
\f	Form Feed
\ooo	Octal value
\xhh	Hex value
```

```
**Kaçış karakteri	işlev	Örnek Kod	Sonuç**
**\n**	The yeni satır karakteri programcının bir dizeden önce veya sonra yeni bir satır eklemesine yardımcı olur.	**txt = “Guru\n99!”**
yazdır(txt)**	Guru99**
**\\**	Bu kaçış dizisi programcının karakterin içine ters eğik çizgi eklemesine olanak tanır. Python çıktı.	txt = “Guru\\99!”
yazdır(txt)**	Guru\99!**
**\xhhh**	Ters eğik çizgiyi ve ardından onaltılık sayıyı kullanın.
Bu, ters eğik çizgiyle, onaltılık eşdeğeri ise çift tırnak işaretiyle yazdırılarak yapılır.	txt = “\x47\x75\x72\x75” + “99!”
yazdır(txt) 	Guru99!
**\oooo**	Sekizli bir değerin tam sayı değerini elde etmek için, ters eğik çizgiden sonra ooo veya çift tırnak içinde sekizli sayıyı girin.
Bu, çift tırnak içinde üç sekizli eşdeğeri olan bir ters eğik çizginin içine yazdırılarak yapılır.	txt = '\107\125\122\125'+ “99!”
yazdır(txt)	GURU99!
**\b**	Bu kaçış dizisi, Python dizi. Ters eğik çizgi ve ardından "b" eklenerek eklenir.
Buradaki “b” ters eğik çizgiyi temsil ediyor.	txt = “Guru\b99!”
yazdır(txt)	Gur99!
**\f**	Değişmez dizelerin enterpolasyonuna yardımcı olur	txt = “Guru\f99!”
yazdır(txt)	Guru
99!
**\r**	Ham bir dize oluşturmanıza yardımcı olur	txt = “Guru\r99!”
yazdır(txt)	99!u
**\ '**	Dizeye tek bir tırnak eklemenize yardımcı olur	txt = “Guru\'99!”
yazdır(txt)	Guru'99!

```
"""

#valuelar (değerler) arasına ayraç olarak ne konulacak.
print ('C:\\north pole\noise_penguins.txt ')
print ('-------')
print ('first', 'second', 'third', sep='\t')

#'\b' aradaki boşlukları kaldırıyor.Cümleler birleşiyor.
print ('we are', '\boosting', 'our', '\brotherhood')
print ('it\'s essential to learn Python\'s libraries in IT World')

#Klavyeden girilen ismi 5 kez alt alta yazdırın.
name = input('İsminiz..:')
print(name)
print(name)
print(name)
print(name)

#advance çözüm
print((name+'\n')*5)

#Matematik ile ilgili bütün fonksiyonlar 'math' kütüphanesinde yer almaktadır.
import math
help (math)

#Bir üçgenin hipotenüsünü hesaplayalım.
#a^3 + b^4 = c^2
import math
a = 3
b = 4
c = math.sqrt(a**2 + b**2) # buradaki math.sqrt karakökünü alma işleminde kullanılır.
print ('Hipotenus..:',c)

#Bir dairenin alanını hesaplama.
import math
r=5     #Yarıçap
#round : Yuvarlama işlemi yapar.

print ('Daire alanı...', round(math.pi*r**2))

bool (None)

bool(0)

bool(0.0) # içerisindeki 0 hep FALSE döndürür.

bool(000000.00001) # içerisine nokta dahi koysanız TRUE döndürür.

print(2 and 3) # Hepsi TRUE ise en sondaki elamanı verir.

print(2 or 3) # Hepsi TRUE ise en baştaki elemanı verir.

print(1 and False) # TRUE AND FALSE ise FALSE i veriyor.

print(1 and 0)

print (None and 0 and '') #and :ilk FALSE elemanı döndürür.

print(2 and 'hello world') # TRUE + TRUE = en sondaki TRUE çıkar.
print([] and 'be happy') # ilk ki içi boş bir listedir ve FALSE dur. Eğer FALSE + TRUE ise ilk FALSE i verir.
print(None and ()) # None FALSE dur bu yüzden ilk FALSE i verir. FALSE + FALSE= FALSE dur.

print (None or '' or 0 or [] or False)  #OR hep TRUE arıyor.Hepsi FALSE ise en sonundakini döndürür.

print(2 or 'hello wrold') # TRUE + TRUE = en baştaki TRUE çıkar.
print([] or 'be happy') # ilk ki içi boş bir listedir ve FALSE dur. Eğer FALSE + TRUE ise ilk FALSE i verir.
print(None or ()) # None FALSE dur bu yüzden ilk FALSE i verir.
print({ } or 0)
print({0} or False) #Burada ilk TRUE i döndürdü.